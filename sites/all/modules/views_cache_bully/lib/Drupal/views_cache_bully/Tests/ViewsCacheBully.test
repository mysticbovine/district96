<?php

namespace Drupal\views_cache_bully\Tests\ViewsCacheBully;

use Drupal\views\ViewExecutable;

class ViewsCacheBullyTest extends PluginTestBase {

  /**
   * Views used by this test.
   *
   * @var array
   */
  public static $testViews = array('test_cache');

  public static function getInfo() {
    return array(
      'name' => 'Test uncached views',
      'description' => 'Verifies that uncached views are being bullied into time-based caching',
      'group' => 'Views Cache Bully',
    );
  }

  protected function setUp() {
    parent::setUp('views_cache_bully');

    $this->enableViewsTestModule();
  }

  /**
   * Tests no caching.
   *
   * @see views_plugin_cache_time
   */
  function testNoneCaching() {
    // Create a basic result which just 2 results.
    $view = views_get_view('test_cache');
    $view->setDisplay();
    $view->display_handler->overrideOption('cache', array(
      'type' => 'none',
      'options' => array()
    ));

    // This execution should trigger our bully hook implementation.
    $this->executeView($view);
    // Verify the result.
    $this->assertEqual(5, count($view->result), 'The number of returned rows match.');

    // Add another man to the beatles.
    $record = array(
      'name' => 'Rod Davis',
      'age' => 29,
      'job' => 'Banjo',
    );

    drupal_write_record('views_test_data', $record);

    // The Result changes, because the view is not cached.
    $view = views_get_view('test_cache');
    $view->setDisplay();
    $view->display_handler->overrideOption('cache', array(
      'type' => 'none',
      'options' => array()
    ));

    // This execution should trigger our bully hook implementation.
    $this->executeView($view);
    // Verify the results have not changed (served from cache).
    $this->assertEqual(5, count($view->result), 'Uncached views are being bullied.');
  }

}